@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager;
@inject SweetAlertService sweetAlertService;

<h3>Países</h3>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />


<a class="btn btn-primary mb-3" href="/countries/create">Nuevo País</a>

<GenericList MyList="Countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>                    
                    <th>País</th>
                    <th style="width:220px">Estados / Departamentos</th>
                    <th style="width:260px"></th>

                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>                        
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.StatesNumber
                        </td>
                        <td>
                            <a href="/countries/details/@country.Id" class="btn btn-info">Detalles</a>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page=1)
    {
        string url1 = $"api/countries?page={page}";
        string url2 = $"api/countries/totalPages";

        var responseHppt = await repository.Get<List<Country>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Countries = responseHppt.Response!;
        totalPages = responseHppt2.Response!;

    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DeleteAsync(Country country)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Está seguro que quiere borrar el registro?.",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"api/countries/{country.Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != System.Net.HttpStatusCode.NotFound) 
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var messageError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error",messageError,SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }

    private async Task CleanFilterAsync()
    {
        //Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}
