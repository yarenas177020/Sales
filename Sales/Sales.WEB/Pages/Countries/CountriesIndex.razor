@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager;
@inject SweetAlertService sweetAlertService;

<h3>Países</h3>

<a class="btn btn-primary mb-3" href="/countries/create">Nuevo País</a>

<GenericList MyList="Countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>País</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            <a class ="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country))>Borrar</button>
                        </td>
                        <td>
                            @country.Name
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }

    private async Task DeleteAsync(Country country)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Está seguro que quiere borrar el registro?.",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Si"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"api/countries/{country.Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != System.Net.HttpStatusCode.NotFound) 
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var messageError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error",messageError,SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }
}
