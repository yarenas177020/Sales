@page "/states/details/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")];





@if (state is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@state.Name</h3>
    <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />


    <div class="mb-2">
        <a class="btn btn-primary" href="/cities/create/@state.Id">Nueva Ciuadad</a>
        <a class="btn btn-success" href="/countries/details/@state.CountryId">Regresar</a>
    </div>

    <GenericList MyList="cities">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ciudad</th>
                        <th style="width:180px"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in cities!)
                    {
                        <tr>
                            <td>
                                @city.Name
                            </td>
                            <td>
                                <a class="btn btn-warning" href="/cities/edit/@city.Id">Editar</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(city.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private State? state;
    private List<City>? cities;
    private int currentPage = 1;
    private int totalPages;


    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/cities?id={StateId}&page={page}";
        string url2 = $"api/cities/totalPages?id={StateId}";
        var responseHppt = await repository.Get<State>($"api/states/{StateId}");
        var responseHppt2 = await repository.Get<List<City>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        state = responseHppt.Response;
        cities = responseHppt2.Response;
        totalPages = responseHppt3.Response;
    }

    private async Task DeleteAsync(int cityId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/cities/{cityId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}
